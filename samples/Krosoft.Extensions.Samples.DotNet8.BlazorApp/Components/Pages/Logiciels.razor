@page "/Logiciels"
@using Krosoft.Extensions.Samples.DotNet8.BlazorApp.Models
@using Krosoft.Extensions.Samples.DotNet8.BlazorApp.Interfaces
@implements IDisposable 
@inject ILogicielsHttpService LogicielsStore
@attribute [StreamRendering]

<PageTitle>Logiciels</PageTitle>

<h1>Logiciels</h1>

<p>This component demonstrates showing data.</p>


@if (_isLoading)
{
    <p>Loading logiciels...</p>
}
else
{
    @if (_isError || _logiciels is null)
    {
        <p>Unable to get logiciels. Please try again later.</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Nom</th>
                <th>Categorie</th>
                <th>Statut</th>
                <th>Date</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var forecast in _logiciels)
            {
                <tr>


                    <td>@forecast.Nom</td>
                    <td>@forecast.Categorie</td>
                    <td>@forecast.StatutCode</td>
                    <td>@forecast.DateCreation?.ToShortDateString()</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private IEnumerable<Logiciel>? _logiciels;
    private bool _isError;
    private bool _isLoading;
    private readonly CancellationTokenSource _cts = new CancellationTokenSource();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetLogicielsAsync(string.Empty);
    }

    private async Task GetLogicielsAsync(string query)
    {
        _isLoading = true;
        var result = await LogicielsStore.GetLogicielsAsync(query, _cts.Token);
        if (result.IsSuccess)
        {
            _logiciels = result.Value!;
        }
        else
        {
            _isError = true;
        }

        _isLoading = false;
    }

}