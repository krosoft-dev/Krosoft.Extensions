parameters:
  - name: buildConfiguration
    type: string
  - name: buildPlatform
    type: string
  - name: testProjects
    type: string
  - name: coverageThreshold
    type: number
    default: 5

steps:
  # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
  - task: DotNetCoreCLI@2
    displayName: "Test"
    inputs:
      command: test
      arguments: >-
        --no-build 
        --configuration ${{ parameters.buildConfiguration }}         
        -p:CollectCoverage=true  
        -p:Platform=${{ parameters.buildPlatform }}
        "-p:CoverletOutputFormat=\"cobertura,opencover\""
      projects: ${{ parameters.testProjects }}

  # # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
  # # First install the tool on the machine, then run it
  # - script: |
  #     dotnet tool install -g dotnet-reportgenerator-globaltool
  #     reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
  #   displayName: Create Code coverage report

  - task: reportgenerator@5
    displayName: Create Code coverage report
    inputs:
      reports: $(Build.SourcesDirectory)/**/coverage.cobertura.xml
      targetdir: $(Build.SourcesDirectory)/CodeCoverage
      reporttypes: HtmlInline_AzurePipelines;Cobertura
      filefilters: -*/Migrations/*.cs;-samples/*.*

  # Publish the code coverage result (summary and web site)
  # The summary allows to view the coverage percentage in the summary tab
  # The web site allows to view which lines are covered directly in Azure Pipeline
  - task: PublishCodeCoverageResults@2
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml"
      failIfCoverageEmpty: true
